{"version":3,"sources":["components/title/index.js","components/footer/index.js","utils/helpers.js","utils/constants.js","components/molecule/index.js","services/form-builder.js","app.js","index.js"],"names":["Title","className","icon","faUserEdit","Footer","href","faGithub","faHeart","parseId","rawId","split","formatDate","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","getInputProps","formField","inputProps","each","keys","key","Molecule","onChangeFormField","moleculeId","id","FormGroup","Label","for","label","Row","Col","ButtonGroup","Button","color","value","onClick","formFieldId","active","Badge","Input","onChange","event","target","name","formMolecules","textMolecule","build","atoms","type","placeholder","process","molecule","output","includes","maxLength","numberMolecule","String","min","max","rangeMolecule","dateMolecule","yesnoMolecule","availableMolecules","processOrganism","organism","molecules","push","buildPayload","formFields","reduce","mapping","Number","App","formElement","useRef","useState","isShowingCodePreview","setIsDevMode","uniqueId","setOrganism","selectedMolecule","setSelectedMolecule","setFormFields","payload","setPayload","useEffect","updatedPayload","handleChangeFormField","map","Container","fluid","xs","Form","Card","CardBody","CardTitle","tag","form","atom","atomId","updatedOrganism","handleChangeAtom","size","filter","handleClickDelete","moleculeToDuplicate","handleClickDuplicate","JSON","stringify","ref","ListGroup","ListGroupItem","find","getKeyLabel","current","innerHTML","html","result","indent","forEach","element","match","substring","startsWith","formatHtml","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4b3f24c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUserEdit } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Title = () => {\n  return (\n    <div className=\"page-title mb-4\">\n      <FontAwesomeIcon icon={faUserEdit} /> Form{\" \"}\n      <span className=\"page-title-bold\">Constructor</span>\n    </div>\n  );\n};\n\nexport default Title;\n","import React from \"react\";\nimport \"./index.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nconst Footer = () => {\n  return (\n    <div className=\"page-footer p-4\">\n      <a href=\"https://github.com/nafeu/form-constructor\">\n        <FontAwesomeIcon icon={faGithub} />\n      </a>{\" \"}\n      / Made with <FontAwesomeIcon icon={faHeart} /> by{\" \"}\n      <a href=\"http://nafeu.com\">Nafeu Nasir.</a>\n    </div>\n  );\n};\n\nexport default Footer;\n","import { find } from 'lodash';\nimport { ID_DELIMITER, FIRST_ITEM } from './constants';\n\nexport const parseId = rawId => rawId.split(ID_DELIMITER)[FIRST_ITEM];\n\nexport const formatDate = date => {\n  var d = new Date(date),\n    month = '' + (d.getMonth() + 1),\n    day = '' + d.getDate(),\n    year = d.getFullYear();\n\n  if (month.length < 2)\n    month = '0' + month;\n  if (day.length < 2)\n    day = '0' + day;\n\n  return [year, month, day].join('-');\n}\n\nexport const getKeyLabel = ({ key, formFields }) => {\n  const formField = find(formFields, { id: key });\n\n  return formField?.label || `[${parseId(key)}]`;\n}\n\nexport const formatHtml = html => {\n  var tab = '  ';\n  var result = '';\n  var indent= '';\n\n  html.split(/>\\s*</).forEach(function(element) {\n    if (element.match( /^\\/\\w/ )) {\n      indent = indent.substring(tab.length);\n    }\n\n    result += indent + '<' + element + '>\\r\\n';\n\n    if (element.match( /^<?\\w[^>]*[^\\/]$/ ) && !element.startsWith(\"input\")  ) {\n      indent += tab;\n    }\n  });\n\n  return result.substring(1, result.length-3);\n}\n","export const FIRST_ITEM = 0;\nexport const ID_DELIMITER = '|';\n","import React from \"react\";\nimport { each, keys } from 'lodash';\nimport { parseId } from '../../utils/helpers';\nimport { FormGroup, Label, Row, Col, ButtonGroup, Button, Input, Badge } from 'reactstrap';\n\nconst getInputProps = formField => {\n  const inputProps = {}\n\n  each(keys(formField), key => {\n    if (key !== 'label') {\n      inputProps[key] = formField[key];\n    }\n  });\n\n  return inputProps;\n}\n\nconst Molecule = ({ formField, onChangeFormField }) => {\n  const moleculeId = parseId(formField.id);\n\n  if (moleculeId === 'yesnoMolecule') {\n    return (\n      <FormGroup>\n        <Label for={formField.id}>{formField.label}</Label>\n        <Row>\n          <Col>\n            <ButtonGroup>\n              <Button\n                color={formField.value === 'yes' ? \"primary\" : \"secondary\"}\n                onClick={() => onChangeFormField({ formFieldId: formField.id, value: 'yes' })}\n                active={formField.value === 'yes'}\n              >\n                Yes\n              </Button>\n              <Button\n                color={formField.value === 'no' ? \"primary\" : \"secondary\"}\n                onClick={() => onChangeFormField({ formFieldId: formField.id, value: 'no' })}\n                active={formField.value === 'no'}\n              >\n                No\n              </Button>\n            </ButtonGroup>\n          </Col>\n        </Row>\n      </FormGroup>\n    );\n  }\n\n  if (moleculeId === 'rangeMolecule') {\n    return (\n      <FormGroup>\n        <Label for={formField.id}>{formField.label} <Badge color=\"primary\">{formField.value}</Badge></Label>\n        <Input\n          id={formField.id}\n          onChange={event => onChangeFormField({ formFieldId: formField.id, value: event.target.value })}\n          {...getInputProps(formField)}\n          name={formField.key || formField.id}\n        />\n      </FormGroup>\n    );\n  }\n\n  return (\n    <FormGroup>\n      <Label for={formField.id}>{formField.label}</Label>\n      <Input\n        id={formField.id}\n        onChange={event => onChangeFormField({ formFieldId: formField.id, value: event.target.value })}\n        {...getInputProps(formField)}\n        name={formField.key || formField.id}\n      />\n    </FormGroup>\n  );\n}\n\nexport default Molecule;\n","import { each, keys } from 'lodash';\nimport { formatDate, parseId } from '../utils/helpers';\n\nexport const formMolecules = {\n  textMolecule: {\n    build: key => ({\n      id: `textMolecule|${key}`,\n      label: 'Text',\n      atoms: [\n        {\n          id: `keyAtom|${key}`,\n          label: 'Key',\n          type: 'text',\n          placeholder: 'Enter Key',\n          value: ''\n        },\n        {\n          id: `labelAtom|${key}`,\n          label: 'Label',\n          type: 'text',\n          placeholder: 'Enter Label',\n          value: ''\n        },\n        {\n          id: `placeholderAtom|${key}`,\n          label: 'Placeholder',\n          type: 'text',\n          placeholder: 'Enter Placeholder',\n          value: ''\n        },\n        {\n          id: `characterLimitAtom|${key}`,\n          label: 'Character Limit',\n          type: 'number',\n          placeholder: 'Enter Character Limit',\n          value: 100\n        }\n      ]\n    }),\n    process: molecule => {\n      const output = {\n        id: molecule.id,\n        type: 'text',\n        value: ''\n      };\n\n      each(molecule.atoms, ({ id, value }) => {\n        if (id.includes('keyAtom')) {\n          output.key = value;\n        }\n\n        if (id.includes('labelAtom')) {\n          output.label = value;\n        }\n\n        if (id.includes('placeholderAtom')) {\n          output.placeholder = value;\n        }\n\n        if (id.includes('characterLimitAtom')) {\n          output.maxLength = value;\n        }\n      });\n\n      return output;\n    }\n  },\n  numberMolecule: {\n    build: key => ({\n      id: `numberMolecule|${key}`,\n      label: 'Number',\n      atoms: [\n        {\n          id: `keyAtom|${key}`,\n          label: 'Key',\n          type: 'text',\n          placeholder: 'Enter Key',\n          value: ''\n        },\n        {\n          id: `labelAtom|${key}`,\n          label: 'Label',\n          type: 'text',\n          placeholder: 'Enter Label',\n          value: ''\n        },\n        {\n          id: `minAtom|${key}`,\n          label: 'Min',\n          type: 'number',\n          placeholder: 'Enter Min',\n          value: String(0)\n        },\n        {\n          id: `maxAtom|${key}`,\n          label: 'Max',\n          type: 'number',\n          placeholder: 'Enter Max',\n          value: String(100)\n        }\n      ]\n    }),\n    process: molecule => {\n      const output = {\n        id: molecule.id,\n        type: 'number',\n        value: null\n      };\n\n      each(molecule.atoms, ({ id, value }) => {\n        if (id.includes('keyAtom')) {\n          output.key = value;\n        }\n\n        if (id.includes('labelAtom')) {\n          output.label = value;\n        }\n\n        if (id.includes('minAtom')) {\n          output.min = value;\n        }\n\n        if (id.includes('maxAtom')) {\n          output.max = value;\n        }\n      });\n\n      return output;\n    }\n  },\n  rangeMolecule: {\n    build: key => ({\n      id: `rangeMolecule|${key}`,\n      label: 'Range',\n      atoms: [\n        {\n          id: `keyAtom|${key}`,\n          label: 'Key',\n          type: 'text',\n          placeholder: 'Enter Key',\n          value: ''\n        },\n        {\n          id: `labelAtom|${key}`,\n          label: 'Label',\n          type: 'text',\n          placeholder: 'Enter Label',\n          value: ''\n        },\n        {\n          id: `minAtom|${key}`,\n          label: 'Min',\n          type: 'number',\n          placeholder: 'Enter Min',\n          value: String(1)\n        },\n        {\n          id: `maxAtom|${key}`,\n          label: 'Max',\n          type: 'number',\n          placeholder: 'Enter Max',\n          value: String(5)\n        }\n      ]\n    }),\n    process: molecule => {\n      const output = {\n        id: molecule.id,\n        type: 'range',\n        value: ''\n      };\n\n      each(molecule.atoms, ({ id, value }) => {\n        if (id.includes('keyAtom')) {\n          output.key = value;\n        }\n\n        if (id.includes('labelAtom')) {\n          output.label = value;\n        }\n\n        if (id.includes('minAtom')) {\n          output.min = value;\n        }\n\n        if (id.includes('maxAtom')) {\n          output.max = value;\n        }\n      });\n\n      return output;\n    }\n  },\n  dateMolecule: {\n    build: key => ({\n      id: `dateMolecule|${key}`,\n      label: 'Date',\n      atoms: [\n        {\n          id: `labelAtom|${key}`,\n          label: 'Label',\n          type: 'text',\n          placeholder: 'Enter Label',\n          value: ''\n        }\n      ]\n    }),\n    process: molecule => {\n      const output = {\n        id: molecule.id,\n        type: 'date',\n        value: formatDate(new Date())\n      };\n\n      each(molecule.atoms, ({ id, value }) => {\n        if (id.includes('keyAtom')) {\n          output.key = value;\n        }\n\n        if (id.includes('labelAtom')) {\n          output.label = value;\n        }\n      });\n\n      return output;\n    }\n  },\n  yesnoMolecule: {\n    build: key => ({\n      id: `yesnoMolecule|${key}`,\n      label: 'Yes-No',\n      atoms: [\n        {\n          id: `labelAtom|${key}`,\n          label: 'Label',\n          type: 'text',\n          placeholder: 'Enter Label',\n          value: ''\n        }\n      ]\n    }),\n    process: molecule => {\n      const output = {\n        id: molecule.id,\n        type: 'text',\n        value: ''\n      };\n\n      each(molecule.atoms, ({ id, value }) => {\n        if (id.includes('keyAtom')) {\n          output.key = value;\n        }\n\n        if (id.includes('labelAtom')) {\n          output.label = value;\n        }\n      });\n\n      return output;\n    }\n  },\n}\n\nexport const availableMolecules = keys(formMolecules);\n\n\nexport const processOrganism = organism => {\n  const output = [];\n\n  each(organism.molecules, molecule => {\n    const moleculeId = parseId(molecule.id);\n\n    output.push(formMolecules[moleculeId].process(molecule));\n  });\n\n  return output;\n}\n\nexport const buildPayload = ({ organism, formFields }) => {\n  if (organism && formFields) {\n    return {\n      id: organism.id,\n      ...formFields.reduce((mapping, formField) => {\n        mapping[formField.key || formField.id] = formField.type === 'number'\n          ? Number(formField.value)\n          : formField.value === null ? '' : String(formField.value);\n\n        return mapping;\n      }, {})\n    }\n  }\n\n  return {}\n}\n","import React, { Fragment, useState, useEffect, useRef } from \"react\";\nimport \"./app.css\";\n\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  ListGroup,\n  ListGroupItem,\n  Card,\n  CardBody,\n  CardTitle\n} from 'reactstrap';\n\nimport { v1 as uniqueId } from 'uuid';\nimport { keys } from 'lodash';\n\nimport Title from \"./components/title\";\nimport Footer from \"./components/footer\";\nimport Molecule from \"./components/molecule\";\nimport { parseId, getKeyLabel, formatHtml } from './utils/helpers';\nimport { FIRST_ITEM } from './utils/constants';\nimport {\n  formMolecules,\n  availableMolecules,\n  processOrganism,\n  buildPayload\n} from './services/form-builder';\n\nfunction App() {\n  const formElement = useRef(null);\n\n  const [isShowingCodePreview, setIsDevMode] = useState(true);\n  const [organism, setOrganism] = useState({\n    id: `organism-${uniqueId()}`,\n    name: '',\n    molecules: [],\n  });\n\n  const [selectedMolecule, setSelectedMolecule] = useState(\n    formMolecules[availableMolecules[FIRST_ITEM]].build()\n  );\n\n  const [formFields, setFormFields] = useState(processOrganism(organism));\n  const [payload, setPayload] = useState(buildPayload({ organism, formFields }));\n\n  useEffect(() => {\n    setFormFields(processOrganism(organism));\n  }, [organism])\n\n  useEffect(() => {\n    const updatedPayload = buildPayload({ organism, formFields });\n\n    setPayload(updatedPayload);\n  }, [organism, formFields]);\n\n  const handleClickToggleDevMode = () => {\n    setIsDevMode(!isShowingCodePreview);\n  }\n\n  const handleChangeText = event => {\n    setOrganism({\n      ...organism,\n      name: event.target.value\n    });\n  }\n\n  const handleSelectMolecule = event => {\n    const moleculeId = event.target.value;\n\n    setSelectedMolecule(formMolecules[moleculeId].build());\n  }\n\n  const handleClickAddMolecule = () => {\n    const moleculeId = parseId(selectedMolecule.id);\n\n    setOrganism({\n      ...organism,\n      molecules: [\n        ...organism.molecules,\n        formMolecules[moleculeId].build(uniqueId())\n      ]\n    })\n  }\n\n  const handleChangeAtom = ({ atomId, moleculeId, event }) => {\n    const updatedOrganism = {\n      ...organism,\n      molecules: organism.molecules.map(molecule => {\n        if (molecule.id === moleculeId) {\n          return {\n            ...molecule,\n            atoms: molecule.atoms.map(atom => {\n              if (atom.id === atomId) {\n                return {\n                  ...atom,\n                  value: event.target.value\n                }\n              }\n\n              return atom;\n            })\n          }\n        }\n\n        return molecule;\n      })\n    }\n\n    setOrganism(updatedOrganism);\n  }\n\n  const handleClickDelete = ({ moleculeId }) => {\n    const updatedOrganism = {\n      ...organism,\n      molecules: organism.molecules.filter(molecule => {\n        return molecule.id !== moleculeId;\n      })\n    }\n\n    setOrganism(updatedOrganism);\n  }\n\n  const handleClickDuplicate = ({ moleculeToDuplicate }) => {\n    const key = uniqueId();\n\n    const updatedOrganism = {\n      ...organism,\n      molecules: [...organism.molecules, {\n        ...moleculeToDuplicate,\n        id: `${parseId(moleculeToDuplicate.id)}|${key}`,\n        atoms: moleculeToDuplicate.atoms.map(atom => ({\n          ...atom,\n          id: `${parseId(atom.id)}|${key}`\n        }))\n      }]\n    }\n\n    setOrganism(updatedOrganism);\n  }\n\n  const handleChangeFormField = ({ formFieldId, value }) => {\n    setFormFields(formFields.map(formField => {\n      if (formField.id === formFieldId) {\n        return {\n          ...formField,\n          value\n        }\n      }\n\n      return formField;\n    }));\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-container\">\n        <Title />\n\n        <Container className=\"mb-4\" fluid>\n          <h4>Construct Form</h4>\n          <Row>\n            <Col xs={isShowingCodePreview ? '6' : '12'}>\n              <Form>\n                <FormGroup>\n                  <Label for=\"formName\">Form Name</Label>\n                  <Input\n                    type=\"text\"\n                    id=\"formName\"\n                    placeholder=\"Enter name\"\n                    value={organism.name}\n                    onChange={handleChangeText}\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"selectMolecule\">Select Form Field</Label>\n                  <Input\n                    type=\"select\"\n                    id=\"selectMolecule\"\n                    placeholder=\"Select form field\"\n                    value={parseId(selectedMolecule.id)}\n                    onChange={handleSelectMolecule}\n                  >\n                    {availableMolecules.map(id => {\n                      const moleculeId = parseId(id);\n                      const { label } = formMolecules[moleculeId].build();\n\n                      return (\n                        <option\n                          key={id}\n                          value={moleculeId}\n                        >\n                          {label}\n                        </option>\n                      );\n                    })}\n                  </Input>\n                </FormGroup>\n                <FormGroup>\n                  <Button\n                    color=\"success\"\n                    className=\"m-1\"\n                    onClick={handleClickAddMolecule}\n                  >\n                    Add Form Field\n                  </Button>\n                  <Button\n                    color={isShowingCodePreview ? 'info' : 'secondary'}\n                    className=\"m-1\"\n                    onClick={handleClickToggleDevMode}\n                  >\n                    {isShowingCodePreview ? 'Hide Code' : 'Show Code'}\n                  </Button>\n                </FormGroup>\n              </Form>\n\n              <Form>\n                {organism.molecules.length > 0 && organism.molecules.map(molecule => {\n                  return (\n                    <Fragment key={molecule.id}>\n                      <Card className=\"mb-4\">\n                        <CardBody>\n                          <CardTitle tag=\"h5\">{molecule.label}</CardTitle>\n                          <Row form>\n                            {molecule.atoms.map(atom => {\n                              return (\n                                <Col xs={molecule.atoms.length >= 3 ? '4' : ''} key={atom.id}>\n                                  <FormGroup>\n                                    <Label for={atom.id}>{atom.label}</Label>\n                                    <Input\n                                      type={atom.type}\n                                      id={atom.id}\n                                      placeholder={atom.placeholder}\n                                      onChange={event => handleChangeAtom({\n                                        atomId: atom.id,\n                                        moleculeId: molecule.id,\n                                        event\n                                      })}\n                                      value={atom.value}\n                                    />\n                                  </FormGroup>\n                                </Col>\n                              );\n                            })}\n                          </Row>\n                          <Row form>\n                            <Col>\n                              <FormGroup>\n                                <Button\n                                  color=\"danger\"\n                                  size=\"sm\"\n                                  className=\"mr-2\"\n                                  onClick={() => handleClickDelete({ moleculeId: molecule.id })}\n                                >\n                                  Delete\n                                </Button>\n                                <Button\n                                  color=\"primary\"\n                                  size=\"sm\"\n                                  onClick={() => handleClickDuplicate({ moleculeToDuplicate: molecule })}\n                                >\n                                  Duplicate\n                                </Button>\n                              </FormGroup>\n                            </Col>\n                          </Row>\n                        </CardBody>\n                      </Card>\n                    </Fragment>\n                  );\n                })}\n              </Form>\n            </Col>\n            {isShowingCodePreview && (\n              <Col xs=\"6\">\n                <pre>\n                  {JSON.stringify(organism, null, 2)}\n                </pre>\n              </Col>\n            )}\n          </Row>\n\n          <hr/>\n\n          {organism.molecules.length > 0 && (\n            <Fragment>\n              <h4>Preview Form</h4>\n              <Row>\n                <Col xs={isShowingCodePreview ? '6' : '12'}>\n                  <Card>\n                    <CardBody>\n                      <CardTitle><strong>{organism.name || '[Untitled Form]'}</strong></CardTitle>\n                      <div ref={formElement}>\n                        {formFields.length > 0 && formFields.map(formField => {\n                          return (\n                            <Row key={formField.id} form>\n                              <Col>\n                                <Molecule\n                                  formField={formField}\n                                  onChangeFormField={handleChangeFormField}\n                                />\n                              </Col>\n                            </Row>\n                          );\n                        })}\n                      </div>\n                    </CardBody>\n                  </Card>\n                </Col>\n                {isShowingCodePreview && (\n                  <Col xs=\"6\">\n                    <pre>\n                      {JSON.stringify(formFields, null, 2)}\n                    </pre>\n                  </Col>\n                )}\n              </Row>\n\n              <hr/>\n            </Fragment>\n          )}\n\n          <h4>Preview Form Data</h4>\n          <Row>\n            <Col xs={isShowingCodePreview ? '6' : '12'}>\n              <ListGroup>\n                {keys(payload).map(key => {\n                  if (key === 'id') {\n                    return '';\n                  }\n\n                  return (\n                    <ListGroupItem key={key}>\n                      {getKeyLabel({ key, formFields })}: <strong>{payload[key]}</strong>\n                    </ListGroupItem>\n                  );\n                })}\n              </ListGroup>\n            </Col>\n            {isShowingCodePreview && (\n              <Col xs=\"6\">\n                <pre>\n                  {JSON.stringify(payload, null, 2)}\n                </pre>\n              </Col>\n            )}\n          </Row>\n\n          {organism.molecules.length > 0 && (\n            <Fragment>\n              <hr/>\n              <h4>Get HTML</h4>\n              <Row>\n                <Col>\n                  <pre>\n                    {formElement?.current?.innerHTML && formatHtml(formElement.current.innerHTML)}\n                  </pre>\n                </Col>\n              </Row>\n            </Fragment>\n          )}\n        </Container>\n\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport \"typeface-roboto-mono\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}