{"version":3,"sources":["components/title/index.js","components/footer/index.js","utils/helpers.js","utils/constants.js","components/molecule/index.js","services/form-builder.js","app.js","index.js"],"names":["Title","className","icon","faUserEdit","Footer","href","faGithub","faHeart","parseId","rawId","split","formatDate","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","getInputProps","formField","inputProps","each","keys","key","Molecule","onChangeFormField","moleculeId","id","FormGroup","Label","for","label","Row","Col","ButtonGroup","Button","color","value","onClick","formFieldId","active","Badge","Input","onChange","event","target","formMolecules","textMolecule","build","atoms","type","placeholder","process","molecule","output","includes","maxLength","numberMolecule","String","min","max","rangeMolecule","dateMolecule","yesnoMolecule","availableMolecules","processOrganism","organism","molecules","push","buildPayload","formFields","reduce","mapping","Number","App","useState","isShowingCodePreview","setIsDevMode","uniqueId","name","setOrganism","selectedMolecule","setSelectedMolecule","setFormFields","payload","setPayload","useEffect","updatedPayload","handleChangeFormField","map","Container","xs","Form","form","atom","atomId","updatedOrganism","handleChangeAtom","size","filter","handleClickDelete","moleculeToDuplicate","handleClickDuplicate","JSON","stringify","ListGroup","ListGroupItem","find","getKeyLabel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b250633.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUserEdit } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Title = () => {\n  return (\n    <div className=\"page-title mb-4\">\n      <FontAwesomeIcon icon={faUserEdit} /> Form{\" \"}\n      <span className=\"page-title-bold\">Constructor</span>\n    </div>\n  );\n};\n\nexport default Title;\n","import React from \"react\";\nimport \"./index.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nconst Footer = () => {\n  return (\n    <div className=\"page-footer p-4\">\n      <a href=\"https://github.com/nafeu/form-constructor\">\n        <FontAwesomeIcon icon={faGithub} />\n      </a>{\" \"}\n      / Made with <FontAwesomeIcon icon={faHeart} /> by{\" \"}\n      <a href=\"http://nafeu.com\">Nafeu Nasir.</a>\n    </div>\n  );\n};\n\nexport default Footer;\n","import { find } from 'lodash';\nimport { ID_DELIMITER, FIRST_ITEM } from './constants';\n\nexport const parseId = rawId => rawId.split(ID_DELIMITER)[FIRST_ITEM];\n\nexport const formatDate = date => {\n  var d = new Date(date),\n    month = '' + (d.getMonth() + 1),\n    day = '' + d.getDate(),\n    year = d.getFullYear();\n\n  if (month.length < 2)\n    month = '0' + month;\n  if (day.length < 2)\n    day = '0' + day;\n\n  return [year, month, day].join('-');\n}\n\nexport const getKeyLabel = ({ key, formFields }) => {\n  const label = find(formFields, { id: key })?.label;\n\n  return label || `[${parseId(key)}]`;\n}","export const FIRST_ITEM = 0;\nexport const ID_DELIMITER = '|';\n","import React from \"react\";\nimport { each, keys } from 'lodash';\nimport { parseId } from '../../utils/helpers';\nimport { FormGroup, Label, Row, Col, ButtonGroup, Button, Input, Badge } from 'reactstrap';\n\nconst getInputProps = formField => {\n  const inputProps = {}\n\n  each(keys(formField), key => {\n    if (key !== 'label') {\n      inputProps[key] = formField[key];\n    }\n  });\n\n  return inputProps;\n}\n\nconst Molecule = ({ formField, onChangeFormField }) => {\n  const moleculeId = parseId(formField.id);\n\n  if (moleculeId === 'yesnoMolecule') {\n    return (\n      <FormGroup>\n        <Label for={formField.id}>{formField.label}</Label>\n        <Row>\n          <Col>\n            <ButtonGroup>\n              <Button\n                color={formField.value === 'yes' ? \"primary\" : \"secondary\"}\n                onClick={() => onChangeFormField({ formFieldId: formField.id, value: 'yes' })}\n                active={formField.value === 'yes'}\n              >\n                Yes\n              </Button>\n              <Button\n                color={formField.value === 'no' ? \"primary\" : \"secondary\"}\n                onClick={() => onChangeFormField({ formFieldId: formField.id, value: 'no' })}\n                active={formField.value === 'no'}\n              >\n                No\n              </Button>\n            </ButtonGroup>\n          </Col>\n        </Row>\n      </FormGroup>\n    );\n  }\n\n  if (moleculeId === 'rangeMolecule') {\n    return (\n      <FormGroup>\n        <Label for={formField.id}>{formField.label} <Badge color=\"primary\">{formField.value}</Badge></Label>\n        <Input\n          id={formField.id}\n          onChange={event => onChangeFormField({ formFieldId: formField.id, value: event.target.value })}\n          {...getInputProps(formField)}\n        />\n      </FormGroup>\n    );\n  }\n\n  return (\n    <FormGroup>\n      <Label for={formField.id}>{formField.label}</Label>\n      <Input\n        id={formField.id}\n        onChange={event => onChangeFormField({ formFieldId: formField.id, value: event.target.value })}\n        {...getInputProps(formField)}\n      />\n    </FormGroup>\n  );\n}\n\nexport default Molecule;\n","import { each, keys } from 'lodash';\nimport { formatDate, parseId } from '../utils/helpers';\n\nexport const formMolecules = {\n  textMolecule: {\n    build: key => ({\n      id: `textMolecule|${key}`,\n      label: 'Text',\n      atoms: [\n        {\n          id: `promptAtom|${key}`,\n          label: 'Prompt',\n          type: 'text',\n          placeholder: 'Enter Prompt',\n          value: ''\n        },\n        {\n          id: `placeholderAtom|${key}`,\n          label: 'Placeholder',\n          type: 'text',\n          placeholder: 'Enter Placeholder',\n          value: ''\n        },\n        {\n          id: `characterLimitAtom|${key}`,\n          label: 'Character Limit',\n          type: 'number',\n          placeholder: 'Enter Character Limit',\n          value: 100\n        }\n      ]\n    }),\n    process: molecule => {\n      const output = {\n        id: molecule.id,\n        type: 'text',\n        value: ''\n      };\n\n      each(molecule.atoms, ({ id, value }) => {\n        if (id.includes('promptAtom')) {\n          output.label = value;\n        }\n\n        if (id.includes('placeholderAtom')) {\n          output.placeholder = value;\n        }\n\n        if (id.includes('characterLimitAtom')) {\n          output.maxLength = value;\n        }\n      });\n\n      return output;\n    }\n  },\n  numberMolecule: {\n    build: key => ({\n      id: `numberMolecule|${key}`,\n      label: 'Number',\n      atoms: [\n        {\n          id: `promptAtom|${key}`,\n          label: 'Prompt',\n          type: 'text',\n          placeholder: 'Enter Prompt',\n          value: ''\n        },\n        {\n          id: `minAtom|${key}`,\n          label: 'Min',\n          type: 'number',\n          placeholder: 'Enter Min',\n          value: String(0)\n        },\n        {\n          id: `maxAtom|${key}`,\n          label: 'Max',\n          type: 'number',\n          placeholder: 'Enter Max',\n          value: String(100)\n        }\n      ]\n    }),\n    process: molecule => {\n      const output = {\n        id: molecule.id,\n        type: 'number',\n        value: null\n      };\n\n      each(molecule.atoms, ({ id, value }) => {\n        if (id.includes('promptAtom')) {\n          output.label = value;\n        }\n\n        if (id.includes('minAtom')) {\n          output.min = value;\n        }\n\n        if (id.includes('maxAtom')) {\n          output.max = value;\n        }\n      });\n\n      return output;\n    }\n  },\n  rangeMolecule: {\n    build: key => ({\n      id: `rangeMolecule|${key}`,\n      label: 'Range',\n      atoms: [\n        {\n          id: `promptAtom|${key}`,\n          label: 'Prompt',\n          type: 'text',\n          placeholder: 'Enter Prompt',\n          value: ''\n        },\n        {\n          id: `minAtom|${key}`,\n          label: 'Min',\n          type: 'number',\n          placeholder: 'Enter Min',\n          value: String(1)\n        },\n        {\n          id: `maxAtom|${key}`,\n          label: 'Max',\n          type: 'number',\n          placeholder: 'Enter Max',\n          value: String(5)\n        }\n      ]\n    }),\n    process: molecule => {\n      const output = {\n        id: molecule.id,\n        type: 'range',\n        value: ''\n      };\n\n      each(molecule.atoms, ({ id, value }) => {\n        if (id.includes('promptAtom')) {\n          output.label = value;\n        }\n\n        if (id.includes('minAtom')) {\n          output.min = value;\n        }\n\n        if (id.includes('maxAtom')) {\n          output.max = value;\n        }\n      });\n\n      return output;\n    }\n  },\n  dateMolecule: {\n    build: key => ({\n      id: `dateMolecule|${key}`,\n      label: 'Date',\n      atoms: [\n        {\n          id: `promptAtom|${key}`,\n          label: 'Prompt',\n          type: 'text',\n          placeholder: 'Enter Prompt',\n          value: ''\n        }\n      ]\n    }),\n    process: molecule => {\n      const output = {\n        id: molecule.id,\n        type: 'date',\n        value: formatDate(new Date())\n      };\n\n      each(molecule.atoms, ({ id, value }) => {\n        if (id.includes('promptAtom')) {\n          output.label = value;\n        }\n      });\n\n      return output;\n    }\n  },\n  yesnoMolecule: {\n    build: key => ({\n      id: `yesnoMolecule|${key}`,\n      label: 'Yes-No',\n      atoms: [\n        {\n          id: `promptAtom|${key}`,\n          label: 'Prompt',\n          type: 'text',\n          placeholder: 'Enter Prompt',\n          value: ''\n        }\n      ]\n    }),\n    process: molecule => {\n      const output = {\n        id: molecule.id,\n        type: 'text',\n        value: ''\n      };\n\n      each(molecule.atoms, ({ id, value }) => {\n        if (id.includes('promptAtom')) {\n          output.label = value;\n        }\n      });\n\n      return output;\n    }\n  },\n}\n\nexport const availableMolecules = keys(formMolecules);\n\n\nexport const processOrganism = organism => {\n  const output = [];\n\n  each(organism.molecules, molecule => {\n    const moleculeId = parseId(molecule.id);\n\n    output.push(formMolecules[moleculeId].process(molecule));\n  });\n\n  return output;\n}\n\nexport const buildPayload = ({ organism, formFields }) => {\n  if (organism && formFields) {\n    return {\n      id: organism.id,\n      ...formFields.reduce((mapping, formField) => {\n        mapping[formField.id] = formField.type === 'number'\n          ? Number(formField.value)\n          : formField.value === null ? '' : String(formField.value);\n\n        return mapping;\n      }, {})\n    }\n  }\n\n  return {}\n}\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport \"./app.css\";\n\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  ListGroup,\n  ListGroupItem\n} from 'reactstrap';\n\nimport { v1 as uniqueId } from 'uuid';\nimport { keys } from 'lodash';\n\nimport Title from \"./components/title\";\nimport Footer from \"./components/footer\";\nimport Molecule from \"./components/molecule\";\nimport { parseId, getKeyLabel } from './utils/helpers';\nimport { FIRST_ITEM } from './utils/constants';\nimport {\n  formMolecules,\n  availableMolecules,\n  processOrganism,\n  buildPayload\n} from './services/form-builder';\n\nfunction App() {\n  const [isShowingCodePreview, setIsDevMode] = useState(true);\n  const [organism, setOrganism] = useState({\n    id: `organism-${uniqueId()}`,\n    name: '',\n    molecules: [],\n  });\n\n  const [selectedMolecule, setSelectedMolecule] = useState(\n    formMolecules[availableMolecules[FIRST_ITEM]].build()\n  );\n\n  const [formFields, setFormFields] = useState(processOrganism(organism));\n  const [payload, setPayload] = useState(buildPayload({ organism, formFields }));\n\n  useEffect(() => {\n    setFormFields(processOrganism(organism));\n  }, [organism])\n\n  useEffect(() => {\n    const updatedPayload = buildPayload({ organism, formFields });\n\n    setPayload(updatedPayload);\n  }, [organism, formFields]);\n\n  const handleClickToggleDevMode = () => {\n    setIsDevMode(!isShowingCodePreview);\n  }\n\n  const handleChangeText = event => {\n    setOrganism({\n      ...organism,\n      name: event.target.value\n    });\n  }\n\n  const handleSelectMolecule = event => {\n    const moleculeId = event.target.value;\n\n    setSelectedMolecule(formMolecules[moleculeId].build());\n  }\n\n  const handleClickAddMolecule = () => {\n    const moleculeId = parseId(selectedMolecule.id);\n\n    setOrganism({\n      ...organism,\n      molecules: [\n        ...organism.molecules,\n        formMolecules[moleculeId].build(uniqueId())\n      ]\n    })\n  }\n\n  const handleChangeAtom = ({ atomId, moleculeId, event }) => {\n    const updatedOrganism = {\n      ...organism,\n      molecules: organism.molecules.map(molecule => {\n        if (molecule.id === moleculeId) {\n          return {\n            ...molecule,\n            atoms: molecule.atoms.map(atom => {\n              if (atom.id === atomId) {\n                return {\n                  ...atom,\n                  value: event.target.value\n                }\n              }\n\n              return atom;\n            })\n          }\n        }\n\n        return molecule;\n      })\n    }\n\n    setOrganism(updatedOrganism);\n  }\n\n  const handleClickDelete = ({ moleculeId }) => {\n    const updatedOrganism = {\n      ...organism,\n      molecules: organism.molecules.filter(molecule => {\n        return molecule.id !== moleculeId;\n      })\n    }\n\n    setOrganism(updatedOrganism);\n  }\n\n  const handleClickDuplicate = ({ moleculeToDuplicate }) => {\n    const key = uniqueId();\n\n    const updatedOrganism = {\n      ...organism,\n      molecules: [...organism.molecules, {\n        ...moleculeToDuplicate,\n        id: `${parseId(moleculeToDuplicate.id)}|${key}`,\n        atoms: moleculeToDuplicate.atoms.map(atom => ({\n          ...atom,\n          id: `${parseId(atom.id)}|${key}`\n        }))\n      }]\n    }\n\n    setOrganism(updatedOrganism);\n  }\n\n  const handleChangeFormField = ({ formFieldId, value }) => {\n    setFormFields(formFields.map(formField => {\n      if (formField.id === formFieldId) {\n        return {\n          ...formField,\n          value\n        }\n      }\n\n      return formField;\n    }));\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-container\">\n        <Title />\n\n        <Container className=\"mb-4\">\n          <h4>Construct Form</h4>\n          <Row>\n            <Col xs={isShowingCodePreview ? '6' : '12'}>\n              <Form>\n                <FormGroup>\n                  <Label for=\"formName\">Form Name</Label>\n                  <Input\n                    type=\"text\"\n                    id=\"formName\"\n                    placeholder=\"Enter name\"\n                    value={organism.name}\n                    onChange={handleChangeText}\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"selectMolecule\">Select Form Field</Label>\n                  <Input\n                    type=\"select\"\n                    id=\"selectMolecule\"\n                    placeholder=\"Select form field\"\n                    value={parseId(selectedMolecule.id)}\n                    onChange={handleSelectMolecule}\n                  >\n                    {availableMolecules.map(id => {\n                      const moleculeId = parseId(id);\n                      const { label } = formMolecules[moleculeId].build();\n\n                      return (\n                        <option\n                          key={id}\n                          value={moleculeId}\n                        >\n                          {label}\n                        </option>\n                      );\n                    })}\n                  </Input>\n                </FormGroup>\n                <FormGroup>\n                  <Button\n                    color=\"success\"\n                    className=\"m-1\"\n                    onClick={handleClickAddMolecule}\n                  >\n                    Add Form Field\n                  </Button>\n                  <Button\n                    color={isShowingCodePreview ? 'info' : 'secondary'}\n                    className=\"m-1\"\n                    onClick={handleClickToggleDevMode}\n                  >\n                    {isShowingCodePreview ? 'Hide Code' : 'Show Code'}\n                  </Button>\n                </FormGroup>\n              </Form>\n              <hr/>\n              <Form>\n                {organism.molecules.length > 0 && organism.molecules.map(molecule => {\n                  return (\n                    <Fragment key={molecule.id}>\n                      <Row form>\n                        {molecule.atoms.map(atom => {\n                          return (\n                            <Col key={atom.id}>\n                              <FormGroup>\n                                <Label for={atom.id}>{atom.label}</Label>\n                                <Input\n                                  type={atom.type}\n                                  id={atom.id}\n                                  placeholder={atom.placeholder}\n                                  onChange={event => handleChangeAtom({\n                                    atomId: atom.id,\n                                    moleculeId: molecule.id,\n                                    event\n                                  })}\n                                  value={atom.value}\n                                />\n                              </FormGroup>\n                            </Col>\n                          );\n                        })}\n                      </Row>\n                      <Row form>\n                        <Col>\n                          <FormGroup>\n                            <Button\n                              color=\"danger\"\n                              size=\"sm\"\n                              className=\"mr-2\"\n                              onClick={() => handleClickDelete({ moleculeId: molecule.id })}\n                            >\n                              Delete\n                            </Button>\n                            <Button\n                              color=\"primary\"\n                              size=\"sm\"\n                              onClick={() => handleClickDuplicate({ moleculeToDuplicate: molecule })}\n                            >\n                              Duplicate\n                            </Button>\n                          </FormGroup>\n                        </Col>\n                      </Row>\n                    </Fragment>\n                  );\n                })}\n              </Form>\n            </Col>\n            {isShowingCodePreview && (\n              <Col xs=\"6\">\n                <pre>\n                  {JSON.stringify(organism, null, 2)}\n                </pre>\n              </Col>\n            )}\n          </Row>\n\n          <hr/>\n\n          {organism.molecules.length > 0 && (\n            <Fragment>\n              <h4>Confirm Fields</h4>\n              <Row>\n                <Col xs={isShowingCodePreview ? '6' : '12'}>\n                  {formFields.length > 0 && formFields.map(formField => {\n                    return (\n                      <Row key={formField.id} form>\n                        <Col>\n                          <Molecule\n                            formField={formField}\n                            onChangeFormField={handleChangeFormField}\n                          />\n                        </Col>\n                      </Row>\n                    );\n                  })}\n                </Col>\n                {isShowingCodePreview && (\n                  <Col xs=\"6\">\n                    <pre>\n                      {JSON.stringify(formFields, null, 2)}\n                    </pre>\n                  </Col>\n                )}\n              </Row>\n\n              <hr/>\n            </Fragment>\n          )}\n\n          <h4>Preview Form Data</h4>\n          <Row>\n            <Col xs={isShowingCodePreview ? '6' : '12'}>\n              <ListGroup>\n                {keys(payload).map(key => {\n                  if (key === 'id') {\n                    return '';\n                  }\n\n                  return (\n                    <ListGroupItem key={key}>\n                      {getKeyLabel({ key, formFields })}: <strong>{payload[key]}</strong>\n                    </ListGroupItem>\n                  );\n                })}\n              </ListGroup>\n            </Col>\n            {isShowingCodePreview && (\n              <Col xs=\"6\">\n                <pre>\n                  {JSON.stringify(payload, null, 2)}\n                </pre>\n              </Col>\n            )}\n          </Row>\n        </Container>\n\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport \"typeface-roboto-mono\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}